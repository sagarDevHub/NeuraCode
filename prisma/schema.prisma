generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  PREMIUM_USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)

  playgrounds        Playground[]
  starredPlaygrounds StarMark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Templates {
  REACT
  NEXTJS
  EXPRESS
  VUE
  HONO
  ANGULAR
}

model Playground {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  template    Templates  @default(REACT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  starMarks   StarMark[]
  templateFiles TemplateFile[]

  @@index([userId])
  @@map("playgrounds")
}

model StarMark {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId 
  userId       String @db.ObjectId 
  playgroundId String @db.ObjectId 
  isMarked     Boolean @default(false)
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)

  @@unique([userId, playgroundId])
  @@map("starmarks")
}

model TemplateFile {
  id String @id @default(cuid()) @map("_id")
  content Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  playgroundId String @unique
  playground Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
}